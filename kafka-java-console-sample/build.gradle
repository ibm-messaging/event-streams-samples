/**
 * Copyright 2015-2016 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
*/
//
// Licensed Materials - Property of IBM
// Â© Copyright IBM Corp. 2015-2016
//
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

mainClassName = 'com.messagehub.samples.MessageHubConsoleSample'
sourceCompatibility = 1.7
targetCompatibility = 1.7
version = '2.0'

repositories {
    mavenCentral()

    // Read from lib/ directory
    flatDir {
        dirs 'lib'
    }
}

// Compile tools.jar and all jars in lib folder as dependencies
dependencies {
    compile 'org.apache.kafka:kafka-clients:1.1.+'
    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-log4j12:1.7.25'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.5'
}

task downloadDependencies(type: Exec) {
  configurations.testRuntime.files
  commandLine 'echo', 'Downloaded all dependencies'
}

// Compile source code
compileJava {
    doFirst {
        copy {
            from configurations.runtime
            into 'lib'
        }
    }

    source = 'src'
    options.encoding = 'ISO-8859-1'
}

// Create the output JAR file.
jar {
    from "resources/log4j.properties"
    
    doLast {
        copy {
            from 'resources'
            into 'build/libs/resources'
        }
    
        copy {
            from 'lib'
            into 'build/libs/lib'
        }
    }
    
    // Provide Main-Class so the JAR executes properly, along with the required classpath data.
    manifest {
        attributes('Main-Class': mainClassName,
        'Class-Path': configurations.runtime.files.collect { './lib/' + it.name }.join(' '))
    }
}

// Save JAR in build directory.
uploadArchives {
    repositories {
        flatDir {
            dirs 'build'
        }
    }
}

['Zip', 'Tar'].each { suffix ->
    "dist$suffix" {
        def basePath = baseName + '-' + version

        from('resources') {
            into { basePath + '/resources' }
            exclude 'log4j.properties'
        }

        from('resources') {
            into { basePath + '/lib' }
            include 'log4j.properties'
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src", "resources"]
        }
    }
}

eclipse {

}

// force eclipse files to regenerate each time
tasks.eclipse.dependsOn cleanEclipse
