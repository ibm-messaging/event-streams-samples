/**
 * Copyright 2015-2018 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
*/
//
// Licensed Materials - Property of IBM
// Â© Copyright IBM Corp. 2015-2018
//

plugins {
  id 'application'
  id 'java'
  id 'eclipse'
  id 'com.commercehub.gradle.plugin.avro' version '0.21.0'
}

group = 'com.ibm.eventstreams.samples'
version = '2.0'
mainClassName = 'com.eventstreams.samples.EventStreamsConsoleSample'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
   maven {
        url = 'https://packages.confluent.io/maven/'
    }
}

dependencies {
  implementation 'org.apache.kafka:kafka-clients:2.7.+'
  implementation 'log4j:log4j:1.2.17'
  implementation 'org.slf4j:slf4j-log4j12:1.7.25'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.+'
  implementation 'io.confluent:kafka-avro-serializer:5.3.+'
  implementation 'org.apache.avro:avro:1.10.+'
}

task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
   source("src/main/avro")
   outputDir = file("build/generated/sources/avro/java/main/resources")
}

// compileJava.source(generateAvro.outputs)
avro {
    createSetters = false
    fieldVisibility = "PRIVATE"
}

// Compile source code
compileJava {
    doFirst {
        copy {
            from configurations.runtimeClasspath
            into 'lib'
        }
    }

    source = ['src', generateAvro.outputs]
    options.encoding = 'ISO-8859-1'
}

jar {
    from "resources/log4j.properties"
    
    doLast {
        copy {
            from 'resources'
            into 'build/libs/resources'
        }
    
        copy {
            from 'lib'
            into 'build/libs/lib'
        }
    }
    
    // Provide Main-Class so the JAR executes properly, along with the required classpath data.
    manifest {
        attributes('Main-Class': mainClassName,
        'Class-Path': configurations.runtimeClasspath.files.collect { './lib/' + it.name }.join(' '))
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
}